# Generated by Django 2.2.2 on 2019-08-30 03:18

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Labeling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='添加时间', verbose_name='添加时间')),
                ('create_user_id', models.CharField(help_text='创建人id', max_length=255, verbose_name='创建人id')),
                ('title', models.CharField(max_length=255)),
                ('frameNum', models.IntegerField(default=0)),
                ('nfft', models.IntegerField(default=4410)),
                ('current_frame', models.IntegerField(default=0)),
                ('manual_pos', models.IntegerField(default=-1)),
                ('extend_rad', models.IntegerField(default=60)),
                ('tone_extend_rad', models.IntegerField(default=60)),
                ('vad_thrart_EE', models.FloatField(default=0.1)),
                ('vad_thrart_RMSE', models.FloatField(default=0.1)),
                ('vad_throp_EE', models.FloatField(default=0.1)),
                ('filter_rad', models.FloatField(default=30.0)),
                ('cache_block_size', models.IntegerField(default=600)),
                ('fs', models.IntegerField(default=44100)),
                ('play_fs', models.IntegerField(default=44100)),
                ('primary_ref', models.CharField(default='combDescan', max_length=255)),
                ('medium_resampling', models.BooleanField(default=True)),
            ],
            options={
                'unique_together': {('title', 'create_user_id', 'nfft')},
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='添加时间', verbose_name='添加时间')),
                ('create_user_id', models.CharField(help_text='创建人id', max_length=255, verbose_name='创建人id')),
                ('title', models.CharField(max_length=255)),
                ('content', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MarkedPhrase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='添加时间', verbose_name='添加时间')),
                ('create_user_id', models.CharField(help_text='创建人id', max_length=255, verbose_name='创建人id')),
                ('title', models.CharField(max_length=255)),
                ('mark', models.CharField(max_length=255)),
                ('start', models.FloatField()),
                ('length', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='添加时间', verbose_name='添加时间')),
                ('create_user_id', models.CharField(help_text='创建人id', max_length=255, verbose_name='创建人id')),
                ('title', models.CharField(max_length=255)),
                ('pos', models.IntegerField()),
                ('length', models.IntegerField()),
                ('pitch', models.FloatField()),
                ('note', models.CharField(max_length=16)),
                ('tone', models.CharField(max_length=16)),
                ('anote', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Wave',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='添加时间', verbose_name='添加时间')),
                ('create_user_id', models.CharField(help_text='创建人id', max_length=255, verbose_name='创建人id')),
                ('title', models.CharField(max_length=255)),
                ('waveFile', models.CharField(max_length=255)),
                ('frameNum', models.IntegerField(default=0)),
                ('duration', models.FloatField()),
                ('chin', models.BinaryField(null=True)),
                ('ee', models.BinaryField(null=True)),
                ('rmse', models.BinaryField(null=True)),
                ('fs', models.IntegerField()),
                ('nfft', models.IntegerField(default=4410)),
                ('completion', models.FloatField()),
            ],
            options={
                'unique_together': {('title', 'create_user_id', 'nfft')},
            },
        ),
        migrations.CreateModel(
            name='Tune',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='添加时间', verbose_name='添加时间')),
                ('create_user_id', models.CharField(help_text='创建人id', max_length=255, verbose_name='创建人id')),
                ('tune_name', models.CharField(max_length=255)),
                ('a4_hz', models.FloatField(default=440.0)),
                ('do', models.CharField(max_length=16)),
                ('note1', models.CharField(max_length=16)),
                ('note2', models.CharField(max_length=16)),
                ('note3', models.CharField(max_length=16)),
                ('note4', models.CharField(max_length=16)),
                ('note5', models.CharField(max_length=16)),
                ('note6', models.CharField(max_length=16)),
                ('note7', models.CharField(max_length=16)),
            ],
            options={
                'unique_together': {('tune_name', 'create_user_id')},
            },
        ),
        migrations.CreateModel(
            name='Clip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='添加时间', verbose_name='添加时间')),
                ('create_user_id', models.CharField(help_text='创建人id', max_length=255, verbose_name='创建人id')),
                ('title', models.CharField(max_length=255)),
                ('startingPos', models.IntegerField()),
                ('length', models.IntegerField()),
                ('src', models.BinaryField(null=True)),
                ('tar', models.BinaryField(null=True)),
                ('anote', models.CharField(max_length=255)),
                ('nfft', models.IntegerField()),
            ],
            options={
                'unique_together': {('title', 'startingPos', 'length', 'create_user_id', 'nfft')},
            },
        ),
        migrations.CreateModel(
            name='TargetUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('wavefileRoot', models.CharField(default='/home/liningbo/waveFiles', max_length=255)),
                ('test', models.CharField(max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Stft',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='添加时间', verbose_name='添加时间')),
                ('create_user_id', models.CharField(help_text='创建人id', max_length=255, verbose_name='创建人id')),
                ('startingPos', models.IntegerField()),
                ('length', models.IntegerField()),
                ('src', models.BinaryField(null=True)),
                ('labeling', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='target.Labeling')),
            ],
            options={
                'unique_together': {('labeling', 'startingPos', 'length')},
            },
        ),
        migrations.CreateModel(
            name='LabelingAlgorithmsConf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='添加时间', verbose_name='添加时间')),
                ('create_user_id', models.CharField(help_text='创建人id', max_length=255, verbose_name='创建人id')),
                ('algorithms', models.CharField(max_length=255)),
                ('is_filter', models.BooleanField(default=True)),
                ('anote', models.CharField(max_length=255, null=True)),
                ('labeling', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='target.Labeling')),
            ],
            options={
                'unique_together': {('labeling', 'algorithms')},
            },
        ),
        migrations.CreateModel(
            name='AlgorithmsMediums',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='添加时间', verbose_name='添加时间')),
                ('create_user_id', models.CharField(help_text='创建人id', max_length=255, verbose_name='创建人id')),
                ('algorithms', models.CharField(max_length=255)),
                ('startingPos', models.IntegerField()),
                ('length', models.IntegerField()),
                ('medium', models.BinaryField(null=True)),
                ('anote', models.CharField(max_length=255)),
                ('labeling', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='target.Labeling')),
            ],
            options={
                'unique_together': {('labeling', 'algorithms', 'startingPos', 'length')},
            },
        ),
        migrations.CreateModel(
            name='AlgorithmsClips',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='添加时间', verbose_name='添加时间')),
                ('create_user_id', models.CharField(help_text='创建人id', max_length=255, verbose_name='创建人id')),
                ('algorithms', models.CharField(max_length=255)),
                ('startingPos', models.IntegerField()),
                ('length', models.IntegerField()),
                ('tar', models.BinaryField(null=True)),
                ('anote', models.CharField(max_length=255)),
                ('labeling', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='target.Labeling')),
            ],
            options={
                'unique_together': {('labeling', 'algorithms', 'startingPos', 'length')},
            },
        ),
    ]
